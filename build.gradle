import org.jetbrains.kotlin.konan.target.HostManager

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:$ktlint_gradle_version"
    }
}

ext.configuredVersion = project.hasProperty("releaseVersion") ? project.releaseVersion : project.version
ext.globalM2 = "$buildDir/m2"
ext.publishLocal = project.hasProperty("publishLocal")


def platforms = ["common", "jvm"]
def projectNeedsPlatform(project, platform) {
    def files = project.projectDir.listFiles()
    def hasPosix = files.any { it.name == "posix" }
    def hasDarwin = files.any { it.name == "darwin" }

    if (hasPosix && hasDarwin) return false

    if (hasPosix && platform == "darwin") return false
    if (hasDarwin && platform == "posix") return false
    if (!hasPosix && !hasDarwin && platform == "darwin") return false

    return files.any { it.name == "common" || it.name == platform }
}

allprojects {
    group = "com.github.komputing.kbignumbers"
    version = configuredVersion
    project.ext.hostManager = new HostManager()
    
    repositories {
        jcenter()
        maven { url 'https://jitpack.io' }
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }

    apply plugin: "kotlin-multiplatform"
    apply from: rootProject.file("gradle/utility.gradle")
    
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    platforms.each { platform ->
        if (projectNeedsPlatform(project, platform)) {
            configure([it]) {
                apply from: rootProject.file("gradle/${platform}.gradle")
            }
        }
    }

    apply from: rootProject.file('gradle/dokka.gradle')
    apply from: rootProject.file('gradle/publish.gradle')
    
    configurations { testOutput }
    
    kotlin {
        configure(sourceSets) {
            def srcDir = name.endsWith("Main") ? "src" : "test"
            def resourcesPrefix = name.endsWith("Test") ? "test-" : ""
            def platform = name[0..-5]

            kotlin.srcDirs = ["$platform/$srcDir"]
            resources.srcDirs = ["$platform/${resourcesPrefix}resources"]

            languageSettings {
                progressiveMode = true
            }
        }
    }
}


afterEvaluate {
    def allCompileKotlinTasks = subprojects.collect {
        it.hasProperty("compileKotlinJvm") ? [it.compileKotlinJvm] : []
    }.flatten()

    task dokkaWebsite(type: dokka.getClass()) {
        outputFormat = 'kotlin-website'
        outputDirectory = "${rootProject.projectDir}/apidoc"

        kotlinTasks { allCompileKotlinTasks }

        reportUndocumented = false
    }
}

